//Autogenerated file by lokumc from stdlib\func_typedefs.go. Do not edit.

package stdlib

import (
	"fmt"

	"github.com/onrirr/lokum"
)

func FuncAR(fn func()) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 0 {
			return nil, lokum.ErrWrongNumArguments
		}
		fn()
		return lokum.UndefinedValue, nil
	}
}

func FuncARI(fn func() int) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 0 {
			return nil, lokum.ErrWrongNumArguments
		}
		return &lokum.Int{Value: int64(fn())}, nil
	}
}

func FuncARI64(fn func() int64) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 0 {
			return nil, lokum.ErrWrongNumArguments
		}
		return &lokum.Int{Value: fn()}, nil
	}
}

func FuncAI64RI64(fn func(int64) int64) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}

		i1, ok := lokum.ToInt64(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "sayı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		return &lokum.Int{Value: fn(i1)}, nil
	}
}

func FuncAI64R(fn func(int64)) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}

		i1, ok := lokum.ToInt64(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "sayı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		fn(i1)
		return lokum.UndefinedValue, nil
	}
}

func FuncARB(fn func() bool) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 0 {
			return nil, lokum.ErrWrongNumArguments
		}
		if fn() {
			return lokum.TrueValue, nil
		}
		return lokum.FalseValue, nil
	}
}

func FuncARE(fn func() error) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 0 {
			return nil, lokum.ErrWrongNumArguments
		}
		return wrapError(fn()), nil
	}
}

func FuncARS(fn func() string) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 0 {
			return nil, lokum.ErrWrongNumArguments
		}
		s := fn()
		if len(s) > lokum.MaxStringLen {
			return nil, lokum.ErrStringLimit
		}
		return &lokum.String{Value: s}, nil
	}
}

func FuncARSE(fn func() (string, error)) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 0 {
			return nil, lokum.ErrWrongNumArguments
		}
		res, err := fn()
		if err != nil {
			return wrapError(err), nil
		}
		if len(res) > lokum.MaxStringLen {
			return nil, lokum.ErrStringLimit
		}
		return &lokum.String{Value: res}, nil
	}
}

func FuncARYE(fn func() ([]byte, error)) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 0 {
			return nil, lokum.ErrWrongNumArguments
		}
		res, err := fn()
		if err != nil {
			return wrapError(err), nil
		}
		if len(res) > lokum.MaxBytesLen {
			return nil, lokum.ErrBytesLimit
		}
		return &lokum.Bytes{Value: res}, nil
	}
}

func FuncARF(fn func() float64) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 0 {
			return nil, lokum.ErrWrongNumArguments
		}
		return &lokum.Float{Value: fn()}, nil
	}
}

func FuncARSs(fn func() []string) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 0 {
			return nil, lokum.ErrWrongNumArguments
		}
		arr := &lokum.Array{}
		for _, elem := range fn() {
			if len(elem) > lokum.MaxStringLen {
				return nil, lokum.ErrStringLimit
			}
			arr.Value = append(arr.Value, &lokum.String{Value: elem})
		}
		return arr, nil
	}
}

func FuncARIsE(fn func() ([]int, error)) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 0 {
			return nil, lokum.ErrWrongNumArguments
		}
		res, err := fn()
		if err != nil {
			return wrapError(err), nil
		}
		arr := &lokum.Array{}
		for _, v := range res {
			arr.Value = append(arr.Value, &lokum.Int{Value: int64(v)})
		}
		return arr, nil
	}
}

func FuncAIRIs(fn func(int) []int) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		i1, ok := lokum.ToInt(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "sayı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		res := fn(i1)
		arr := &lokum.Array{}
		for _, v := range res {
			arr.Value = append(arr.Value, &lokum.Int{Value: int64(v)})
		}
		return arr, nil
	}
}

func FuncAFRF(fn func(float64) float64) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		f1, ok := lokum.ToFloat64(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "float(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		return &lokum.Float{Value: fn(f1)}, nil
	}
}

func FuncAIR(fn func(int)) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		i1, ok := lokum.ToInt(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "sayı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		fn(i1)
		return lokum.UndefinedValue, nil
	}
}

func FuncAIRF(fn func(int) float64) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		i1, ok := lokum.ToInt(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "sayı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		return &lokum.Float{Value: fn(i1)}, nil
	}
}

func FuncAFRI(fn func(float64) int) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		f1, ok := lokum.ToFloat64(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "float(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		return &lokum.Int{Value: int64(fn(f1))}, nil
	}
}

func FuncAFFRF(fn func(float64, float64) float64) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 2 {
			return nil, lokum.ErrWrongNumArguments
		}
		f1, ok := lokum.ToFloat64(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "float(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		f2, ok := lokum.ToFloat64(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "float(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		return &lokum.Float{Value: fn(f1, f2)}, nil
	}
}

func FuncAIFRF(fn func(int, float64) float64) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 2 {
			return nil, lokum.ErrWrongNumArguments
		}
		i1, ok := lokum.ToInt(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "sayı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		f2, ok := lokum.ToFloat64(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "float(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		return &lokum.Float{Value: fn(i1, f2)}, nil
	}
}

func FuncAFIRF(fn func(float64, int) float64) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 2 {
			return nil, lokum.ErrWrongNumArguments
		}
		f1, ok := lokum.ToFloat64(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "float(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		i2, ok := lokum.ToInt(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "sayı(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		return &lokum.Float{Value: fn(f1, i2)}, nil
	}
}

func FuncAFIRB(fn func(float64, int) bool) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 2 {
			return nil, lokum.ErrWrongNumArguments
		}
		f1, ok := lokum.ToFloat64(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "float(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		i2, ok := lokum.ToInt(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "sayı(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		if fn(f1, i2) {
			return lokum.TrueValue, nil
		}
		return lokum.FalseValue, nil
	}
}

func FuncAFRB(fn func(float64) bool) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		f1, ok := lokum.ToFloat64(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "float(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		if fn(f1) {
			return lokum.TrueValue, nil
		}
		return lokum.FalseValue, nil
	}
}

func FuncASRS(fn func(string) string) lokum.CallableFunc {
	return func(args ...lokum.Object) (lokum.Object, error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		s := fn(s1)
		if len(s) > lokum.MaxStringLen {
			return nil, lokum.ErrStringLimit
		}
		return &lokum.String{Value: s}, nil
	}
}

func FuncASRSs(fn func(string) []string) lokum.CallableFunc {
	return func(args ...lokum.Object) (lokum.Object, error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		res := fn(s1)
		arr := &lokum.Array{}
		for _, elem := range res {
			if len(elem) > lokum.MaxStringLen {
				return nil, lokum.ErrStringLimit
			}
			arr.Value = append(arr.Value, &lokum.String{Value: elem})
		}
		return arr, nil
	}
}

func FuncASRSE(fn func(string) (string, error)) lokum.CallableFunc {
	return func(args ...lokum.Object) (lokum.Object, error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		res, err := fn(s1)
		if err != nil {
			return wrapError(err), nil
		}
		if len(res) > lokum.MaxStringLen {
			return nil, lokum.ErrStringLimit
		}
		return &lokum.String{Value: res}, nil
	}
}

func FuncASRE(fn func(string) error) lokum.CallableFunc {
	return func(args ...lokum.Object) (lokum.Object, error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		return wrapError(fn(s1)), nil
	}
}

func FuncASSRE(fn func(string, string) error) lokum.CallableFunc {
	return func(args ...lokum.Object) (lokum.Object, error) {
		if len(args) != 2 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		s2, ok := lokum.ToString(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "yazı(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		return wrapError(fn(s1, s2)), nil
	}
}

func FuncASSRSs(fn func(string, string) []string) lokum.CallableFunc {
	return func(args ...lokum.Object) (lokum.Object, error) {
		if len(args) != 2 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		s2, ok := lokum.ToString(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		arr := &lokum.Array{}
		for _, res := range fn(s1, s2) {
			if len(res) > lokum.MaxStringLen {
				return nil, lokum.ErrStringLimit
			}
			arr.Value = append(arr.Value, &lokum.String{Value: res})
		}
		return arr, nil
	}
}

func FuncASSIRSs(fn func(string, string, int) []string) lokum.CallableFunc {
	return func(args ...lokum.Object) (lokum.Object, error) {
		if len(args) != 3 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		s2, ok := lokum.ToString(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "yazı(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		i3, ok := lokum.ToInt(args[2])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "third",
				Expected: "sayı(geçerli)",
				Found:    args[2].TypeName(),
			}
		}
		arr := &lokum.Array{}
		for _, res := range fn(s1, s2, i3) {
			if len(res) > lokum.MaxStringLen {
				return nil, lokum.ErrStringLimit
			}
			arr.Value = append(arr.Value, &lokum.String{Value: res})
		}
		return arr, nil
	}
}

func FuncASSRI(fn func(string, string) int) lokum.CallableFunc {
	return func(args ...lokum.Object) (lokum.Object, error) {
		if len(args) != 2 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		s2, ok := lokum.ToString(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		return &lokum.Int{Value: int64(fn(s1, s2))}, nil
	}
}

func FuncASSRS(fn func(string, string) string) lokum.CallableFunc {
	return func(args ...lokum.Object) (lokum.Object, error) {
		if len(args) != 2 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		s2, ok := lokum.ToString(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "yazı(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		s := fn(s1, s2)
		if len(s) > lokum.MaxStringLen {
			return nil, lokum.ErrStringLimit
		}
		return &lokum.String{Value: s}, nil
	}
}

func FuncASSRB(fn func(string, string) bool) lokum.CallableFunc {
	return func(args ...lokum.Object) (lokum.Object, error) {
		if len(args) != 2 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		s2, ok := lokum.ToString(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "yazı(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		if fn(s1, s2) {
			return lokum.TrueValue, nil
		}
		return lokum.FalseValue, nil
	}
}

func FuncASsSRS(fn func([]string, string) string) lokum.CallableFunc {
	return func(args ...lokum.Object) (lokum.Object, error) {
		if len(args) != 2 {
			return nil, lokum.ErrWrongNumArguments
		}
		var ss1 []string
		switch arg0 := args[0].(type) {
		case *lokum.Array:
			for idx, a := range arg0.Value {
				as, ok := lokum.ToString(a)
				if !ok {
					return nil, lokum.ErrInvalidArgumentType{
						Name:     fmt.Sprintf("first[%d]", idx),
						Expected: "yazı(geçerli)",
						Found:    a.TypeName(),
					}
				}
				ss1 = append(ss1, as)
			}
		case *lokum.ImmutableArray:
			for idx, a := range arg0.Value {
				as, ok := lokum.ToString(a)
				if !ok {
					return nil, lokum.ErrInvalidArgumentType{
						Name:     fmt.Sprintf("first[%d]", idx),
						Expected: "yazı(geçerli)",
						Found:    a.TypeName(),
					}
				}
				ss1 = append(ss1, as)
			}
		default:
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "liste",
				Found:    args[0].TypeName(),
			}
		}
		s2, ok := lokum.ToString(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "yazı(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		s := fn(ss1, s2)
		if len(s) > lokum.MaxStringLen {
			return nil, lokum.ErrStringLimit
		}
		return &lokum.String{Value: s}, nil
	}
}

func FuncASI64RE(fn func(string, int64) error) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 2 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		i2, ok := lokum.ToInt64(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "sayı(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		return wrapError(fn(s1, i2)), nil
	}
}

func FuncAIIRE(fn func(int, int) error) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 2 {
			return nil, lokum.ErrWrongNumArguments
		}
		i1, ok := lokum.ToInt(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "sayı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		i2, ok := lokum.ToInt(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "sayı(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		return wrapError(fn(i1, i2)), nil
	}
}

func FuncASIRS(fn func(string, int) string) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 2 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		i2, ok := lokum.ToInt(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "sayı(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		s := fn(s1, i2)
		if len(s) > lokum.MaxStringLen {
			return nil, lokum.ErrStringLimit
		}
		return &lokum.String{Value: s}, nil
	}
}

func FuncASIIRE(fn func(string, int, int) error) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 3 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		i2, ok := lokum.ToInt(args[1])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "second",
				Expected: "sayı(geçerli)",
				Found:    args[1].TypeName(),
			}
		}
		i3, ok := lokum.ToInt(args[2])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "third",
				Expected: "sayı(geçerli)",
				Found:    args[2].TypeName(),
			}
		}
		return wrapError(fn(s1, i2, i3)), nil
	}
}

func FuncAYRIE(fn func([]byte) (int, error)) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		y1, ok := lokum.ToByteSlice(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "bytes(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		res, err := fn(y1)
		if err != nil {
			return wrapError(err), nil
		}
		return &lokum.Int{Value: int64(res)}, nil
	}
}

func FuncAYRS(fn func([]byte) string) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		y1, ok := lokum.ToByteSlice(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "bytes(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		res := fn(y1)
		return &lokum.String{Value: res}, nil
	}
}

func FuncASRIE(fn func(string) (int, error)) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		res, err := fn(s1)
		if err != nil {
			return wrapError(err), nil
		}
		return &lokum.Int{Value: int64(res)}, nil
	}
}

func FuncASRYE(fn func(string) ([]byte, error)) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		s1, ok := lokum.ToString(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "yazı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		res, err := fn(s1)
		if err != nil {
			return wrapError(err), nil
		}
		if len(res) > lokum.MaxBytesLen {
			return nil, lokum.ErrBytesLimit
		}
		return &lokum.Bytes{Value: res}, nil
	}
}

func FuncAIRSsE(fn func(int) ([]string, error)) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		i1, ok := lokum.ToInt(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "sayı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		res, err := fn(i1)
		if err != nil {
			return wrapError(err), nil
		}
		arr := &lokum.Array{}
		for _, r := range res {
			if len(r) > lokum.MaxStringLen {
				return nil, lokum.ErrStringLimit
			}
			arr.Value = append(arr.Value, &lokum.String{Value: r})
		}
		return arr, nil
	}
}

func FuncAIRS(fn func(int) string) lokum.CallableFunc {
	return func(args ...lokum.Object) (ret lokum.Object, err error) {
		if len(args) != 1 {
			return nil, lokum.ErrWrongNumArguments
		}
		i1, ok := lokum.ToInt(args[0])
		if !ok {
			return nil, lokum.ErrInvalidArgumentType{
				Name:     "first",
				Expected: "sayı(geçerli)",
				Found:    args[0].TypeName(),
			}
		}
		s := fn(i1)
		if len(s) > lokum.MaxStringLen {
			return nil, lokum.ErrStringLimit
		}
		return &lokum.String{Value: s}, nil
	}
}
